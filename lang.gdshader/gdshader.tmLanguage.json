{
  "name": "GDShader",
  "fileTypes": [ "gdshader" ],
  "scopeName": "source.gdshader",
  "patterns": [
    { "include": "#any" }
  ],
  "repository": {
    "any": {
      "patterns": [
        { "include": "#comment" },
        { "include": "#enclosed" },
        { "include": "#keyword" },
        { "include": "#classifier" },
        { "include": "#element" },
        { "include": "#separator" },
        { "include": "#operator" }
      ]
    },
    
    "comment": {
      "patterns": [
        { "include": "#commentLine" },
        { "include": "#commentBlock" }
      ]
    },
    "commentLine": {
      "name": "comment.line.double-slash.gdshader",
      "begin": "//",
      "end": "$"
    },
    "commentBlock": {
      "name": "comment.block.gdshader",
      "begin": "/\\*",
      "end": "\\*/"
    },
    
    "enclosed": {
      "name": "meta.parenthesis.gdshader",
      "begin": "\\(",
      "end": "\\)",
      "captures": {
        "0": { "name": "punctuation.parenthesis.gdshader" }
      },
      "patterns": [
        { "include": "#any" }
      ]
    },
    
    "classifier": {
      "name": "meta.classifier.gdshader",
      "begin": "\\b(?:shader_type|render_mode)\\b",
      "beginCaptures": {
        "0": { "name": "keyword.language.classifier.gdshader" }
      },
      "patterns": [
        { "include": "#comment" },
        { "include": "#identifierClassification" },
        { "include": "#separatorComma" }
      ],
      "end": "(?=;)"
    },
    "identifierClassification": {
      "name": "entity.other.inherited-class.gdshader",
      "match": "\\b[a-z_]+\\b"
    },
    
    "keyword": {
      "patterns": [
        { "include": "#modifierKeyword" },
        { "include": "#controlKeyword" },
        { "include": "#typeKeyword" },
        { "include": "#hintKeyword" }
      ]
    },
    "modifierKeyword": {
      "name": "storage.modifier.gdshader",
      "match": "\\b(?:const|uniform|varying|(?:low|medium|high)p|in|out|inout|flat|smooth)\\b"
    },
    "controlKeyword": {
      "name": "keyword.control.gdshader",
      "match": "\\b(?:if|else|do|while|for|continue|break|switch|case|default|return|discard)\\b"
    },
    "typeKeyword": {
      "name": "support.type.gdshader",
      "match": "\\b(?:void|bool|[biu]?vec[234]|u?int|float|mat[234]|[iu]?sampler(?:3D|2D(?:Array)?)|samplerCube)\\b"
    },
    "hintKeyword": {
      "name": "storage.type.annotation.gdshader",
      "match": "\\b(hint_(?:color|range|(?:black_)?albedo|normal|white|black|aniso))\\b",
      "captures": {
        "1": { "name": "support.type.annotation.gdshader" }
      }
    },
    
    "element": {
      "patterns": [
        { "include": "#literalFloat" },
        { "include": "#literalInt" },
        { "include": "#literalBool" },
        
        { "include": "#processorFunction" },
        { "include": "#identifierFunction" },
        
        { "include": "#identifierField" },
        { "include": "#languageVariable" },
        { "include": "#identifierVariable" }
      ]
    },
    
    "literalFloat": {
      "name": "constant.numeric.float.gdshader",
      "match": "\\b(?:\\d+[eE][-+]?\\d+|(?:\\d*[.]\\d+|\\d+[.])(?:[eE][-+]?\\d+)?)[fF]?"
    },
    "literalInt": {
      "name": "constant.numeric.integer.gdshader",
      "match": "\\b(?:0[xX][0-9A-Fa-f]+|\\d+)\\b"
    },
    "literalBool": {
      "name": "constant.language.boolean.gdshader",
      "match": "\\b(?:false|true)\\b"
    },
    
    "processorFunction": {
      "name": "support.function.gdshader",
      "match": "\\b(?:vertex|fragment|light)(?=(?:\\s|/\\*(?:\\*(?!/)|[^*])*\\*/)*[(])"
    },
    "identifierFunction": {
      "name": "entity.name.function.gdshader",
      "match": "\\b[a-zA-Z_]\\w*(?=(?:\\s|/\\*(?:\\*(?!/)|[^*])*\\*/)*[(])"
    },
    
    "identifierField": {
      "name": "entity.name.variable.field.gdshader",
      "match": "(?<=[.]\\s*)[a-zA-Z_]\\w*\\b"
    },
    "languageVariable": {
      "name": "variable.language.gdshader",
      "match": "\\b(?:[A-Z][A-Z_0-9]*)\\b"
    },
    "identifierVariable": {
      "name": "variable.name.gdshader",
      "match": "\\b[a-zA-Z_]\\w*\\b"
    },
    
    "separator": {
      "patterns": [
        { "match": "[.]", "name": "punctuation.accessor.gdshader" },
        { "include": "#separatorComma" },
        { "match": "[;]", "name": "punctuation.terminator.statement.gdshader" },
        { "match": "[:]", "name": "keyword.operator.type.annotation.gdshader" }
      ]
    },
    "separatorComma": {
      "name": "punctuation.separator.comma.gdshader",
      "match": "[,]"
    },
    
    "operator": {
      "name": "keyword.operator.gdshader",
      "match": "\\<\\<\\=?|\\>\\>\\=?|[-+*/&|<>=!]\\=|\\&\\&|[|][|]|[-+~!*/%<>&^|=]"
    }
  }
}
