<base href="%{docsUrl}"/>%{injectHead}<style>
/* Fix incorrect webview styles in IDE, which differs from browser */
body.wy-body-for-nav { padding: 0; font-size: unset }
html blockquote { background: unset; border-color: unset; }
/* Would hide ad popup if it were loaded */
#rtd-sidebar { display: none !important }
/* Hide incorrect "page does not exist in stable" text, and fix previous text margin */
p.latest-notice-link { display: none !important } div.latest-notice > p:nth-last-child(2) { margin-bottom: 0; }
/* Hide list of languages, as they don't work the same as english */
dl.ide-webview-other-languages { display: none !important }
</style><script>
// Set default code language tab to C# or GDScript, if preference is detected
if ('%{codeLang}' && !sessionStorage.getItem('sphinx-tabs-last-selected'))
  sessionStorage.setItem('sphinx-tabs-last-selected', btoa('%{codeLang}'));
// Set fragment parameter, scrolling to it
location.hash = "%{urlFragment}";
// Fix form submitting by simulating a click on a link to open it externally
function vscodeSubmitForm(/**@type {SubmitEvent}*/ event) {
  event.preventDefault();
  /**@type {HTMLFormElement}*/ const form = event.target;
  const a = document.createElement('a');
  a.href = form.action + '?' + new URLSearchParams(new FormData(form)).toString();
  a.target = '_blank';
  a.style.display = 'none';
  form.append(a);
  a.click();
  a.remove();
}
const vscode = acquireVsCodeApi();
// Implement link navigation on webview via message passing, otherwise all links would be opened externally
document.addEventListener('click', event => {
  /**@type {HTMLAnchorElement}*/ const a = event.target.closest('a');
  if (!a) return;
  const openInNewTab = a.target && a.target != '_self' || event.ctrlKey || event.metaKey || event.button === 1;
  if (!openInNewTab && a.href.startsWith(document.baseURI + '#')) {
    vscode.postMessage({ newFragment: a.href.substring(document.baseURI.length + 1) });
    return;
  }
  event.preventDefault();
  event.stopPropagation();
  vscode.postMessage({ navigateTo: a.href, exitThisPage: !openInNewTab });
});
document.addEventListener('DOMContentLoaded', () => {
  const hash = location.hash.replace(/^#/, ''), idPrefix = 'class-%{classLower}-property-';
  if (!document.getElementById(hash) && hash.startsWith(idPrefix)) { // If fragment is a non-existing property
    const idProp = hash.substring(idPrefix.length);
    /**@type {HTMLAnchorElement | null}*/ const baseClassLink = document.evaluate(
      '//h1/following-sibling::p/child::strong[text()="Inherits:"]/following-sibling::a',
      document, null, XPathResult.FIRST_ORDERED_NODE_TYPE
    ).singleNodeValue;
    const baseClassUrl = baseClassLink?.getAttribute('href');
    let tryBaseLink;
    if (/\bclass_\w+\.html#class-\w+$/.test(baseClassUrl)) { // If a base class exists
      if ('%{canRedirect}') { // If we're allowed, auto-redirect inherited property to definition in base class
        const basePropUrl = baseClassLink.href + '-property-' + idProp;
        vscode.postMessage({ navigateTo: basePropUrl, exitThisPage: true });
        stop();
        return;
      } // Else show link to go manually to base class if desired
      const basePropUrl = baseClassUrl + '-property-' + idProp;
      tryBaseLink = ` <a href="${basePropUrl}" title="${basePropUrl}">Try at the base class</a>.`;
    } else tryBaseLink = ''; // Else property was not found in any class in inheritance chain
    const admonitionContainer = document.getElementsByClassName('admonition-grid')[0] ??
      document.querySelector('div[itemprop="articleBody"]');
    admonitionContainer?.insertAdjacentHTML('afterbegin', `\
<div class="admonition warning not-found">
  <p class="first admonition-title">Not found</p>
  <p><strong>The property was not found:</strong>
  <code class="docutils literal notranslate">${idProp.replaceAll('-', '_')}</code>.${tryBaseLink}</p>
</div>`
    );
  }
  // Apply submit fix to first form (search bar) if present
  document.forms[0]?.addEventListener('submit', vscodeSubmitForm);
  // Fix version links making them point to this specific page instead of home
  const versionLinksIterator = document.evaluate(
    '//div[contains(@class, "rst-other-versions")]/dl[./dt[text()="Versions"]]/dd/a',
    document, null, XPathResult.UNORDERED_NODE_ITERATOR_TYPE
  );
  /**@type {HTMLAnchorElement[]}*/ const versionLinks = [];
  for (let a; a = versionLinksIterator.iterateNext();) versionLinks.push(a);
  for (const a of versionLinks)
    a.href = a.title = otherVersionUri(a.text);
  // Identify language links for hiding
  /**@type {HTMLDListElement | null}*/ const langLinksNode = document.evaluate(
    '//div[contains(@class, "rst-other-versions")]/dl[./dt[text()="Languages"]]',
    document, null, XPathResult.FIRST_ORDERED_NODE_TYPE
  ).singleNodeValue;
  langLinksNode?.classList.add('ide-webview-other-languages');
  // Show link to stable and latest if not currently on these
  const switchVer = document.createElement('span'), thisVer = thisVersion();
  switchVer.innerText = ' \u00A0 â€¢ \u00A0 Other versions:';
  if (thisVer != 'stable') switchVer.append(' ', otherVersionLink('stable'));
  if (thisVer != 'latest') switchVer.append(' ', otherVersionLink('latest'));
  document.querySelector(
    'div.rst-content div[role="navigation"] > ul.wy-breadcrumbs > li:first-child > div:first-child'
  ).appendChild(switchVer);
  document.evaluate('//div/div/div[1]/ul/li/div')
});
function otherVersionUri(version) {
  return document.baseURI.replace(/(?<=\/%{locale}\/)[^/]+(?=\/)/, version);
}
function otherVersionLink(version) {
  const href = otherVersionUri(version);
  const a = document.createElement('a');
  a.href = href.replaceAll('classes/', 'classes%2F'); // to avoid the docs icon ::after the link
  a.innerText = `[${version}]`;
  return a;
}
function thisVersion() {
  return document.baseURI.match(/(?<=\/%{locale}\/)[^/]+(?=\/)/)?.[0] ?? '';
}
</script><meta http-equiv="Content-Security-Policy" content="%{csp}"/>
